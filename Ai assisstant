Though python deployement cannot be shown on github here is the code for the ai assisstant that has been made


# app.py
from flask import Flask, render_template, request, jsonify
import google.generativeai as genai
import markdown
import os
from datetime import datetime

app = Flask(__name__)

# Configure Gemini API
genai.configure(api_key='AIzaSyCJGtP8yjI9NglZW7-rVftmBjHT5xYqI_I')
model = genai.GenerativeModel('gemini-pro')

def generate_legal_content(prompt):
    # Enhance the prompt to get structured legal information
    enhanced_prompt = f"""
    Please provide detailed legal information about: {prompt}
    Structure the response as follows:
    1. Overview
    2. Key Points
    3. Legal References
    4. Practical Applications
    5. Related Cases
    Please be specific and cite relevant laws and cases.
    """
    
    response = model.generate_content(enhanced_prompt)
    return response.text

@app.route('/')
def home():
    return"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Legal Research Assistant</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">
    <style>
     :root {
            --primary-gradient: linear-gradient(135deg, #6366f1 0%, #a855f7 100%);
            --glass-bg: rgba(255, 255, 255, 0.08);
            --message-user: linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%);
            --message-bot: linear-gradient(135deg, rgba(255, 255, 255, 0.1) 0%, rgba(255, 255, 255, 0.05) 100%);
            --hover-color: rgba(255, 255, 255, 0.15);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: 'Helvetica Neue', Arial, sans-serif;
            background: #0f172a;
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            background-image: 
                radial-gradient(circle at 15% 50%, rgba(99, 102, 241, 0.15) 0%, transparent 25%),
                radial-gradient(circle at 85% 30%, rgba(168, 85, 247, 0.15) 0%, transparent 25%);
        }

        .app-container {
            width: 95%;
            max-width: 1400px;
            height: 90vh;
            display: flex;
            gap: 24px;
            padding: 24px;
            background: rgba(15, 23, 42, 0.6);
            backdrop-filter: blur(20px);
            border-radius: 30px;
            border: 1px solid rgba(255, 255, 255, 0.1);
            box-shadow: 
                0 0 40px rgba(99, 102, 241, 0.1),
                0 0 80px rgba(168, 85, 247, 0.1);
        }

        .sidebar {
            width: 340px;
            background: var(--glass-bg);
            border-radius: 24px;
            padding: 24px;
            display: flex;
            flex-direction: column;
            gap: 20px;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        .main-content {
            flex: 1;
            background: var(--glass-bg);
            border-radius: 24px;
            display: flex;
            flex-direction: column;
            border: 1px solid rgba(255, 255, 255, 0.05);
            overflow: hidden;
        }

        .chat-header {
            padding: 24px;
            background: rgba(15, 23, 42, 0.5);
            border-bottom: 1px solid rgba(255, 255, 255, 0.05);
        }

        .chat-header h1 {
            font-size: 1.5rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .chat-header h1 i {
            color: #6366f1;
        }

        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 24px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .message {
            max-width: 85%;
            padding: 16px 20px;
            border-radius: 20px;
            font-size: 0.95rem;
            line-height: 1.5;
            position: relative;
            animation: slideIn 0.3s ease-out;
        }

        .user-message {
            align-self: flex-end;
            background: var(--message-user);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-bottom-right-radius: 4px;
            box-shadow: 0 4px 15px rgba(99, 102, 241, 0.2);
        }

        .bot-message {
            align-self: flex-start;
            background: var(--message-bot);
            border: 1px solid rgba(255, 255, 255, 0.05);
            border-bottom-left-radius: 4px;
        }

        .input-area {
            padding: 24px;
            background: rgba(15, 23, 42, 0.5);
            border-top: 1px solid rgba(255, 255, 255, 0.05);
        }

        .input-container {
            display: flex;
            gap: 12px;
            background: rgba(255, 255, 255, 0.05);
            padding: 8px;
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        #searchInput {
            flex: 1;
            padding: 12px 16px;
            background: transparent;
            border: none;
            color: white;
            font-size: 0.95rem;
        }

        #searchInput::placeholder {
            color: rgba(255, 255, 255, 0.5);
        }

        #searchInput:focus {
            outline: none;
        }

        button {
            padding: 12px 24px;
            background: var(--primary-gradient);
            border: none;
            border-radius: 12px;
            color: white;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        button:hover {
            opacity: 0.9;
            transform: translateY(-1px);
        }

        .note-list {
            display: flex;
            flex-direction: column;
            gap: 12px;
            overflow-y: auto;
        }

        .note-entry {
            background: rgba(255, 255, 255, 0.03);
            padding: 16px;
            border-radius: 16px;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 1px solid rgba(255, 255, 255, 0.05);
        }

        .note-entry:hover {
            background: var(--hover-color);
            transform: translateY(-2px);
        }

        .note-entry h3 {
            font-size: 0.9rem;
            margin-bottom: 8px;
            color: rgba(255, 255, 255, 0.9);
        }

        .note-timestamp {
            font-size: 0.8rem;
            color: rgba(255, 255, 255, 0.5);
        }

        .loading-spinner {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(15, 23, 42, 0.8);
            backdrop-filter: blur(8px);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 3px solid rgba(255, 255, 255, 0.1);
            border-radius: 50%;
            border-top-color: #6366f1;
            animation: spin 0.8s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 6px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.02);
        }

        ::-webkit-scrollbar-thumb {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 3px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: rgba(255, 255, 255, 0.15);
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .app-container {
                flex-direction: column;
                height: 100vh;
                padding: 16px;
                width: 100%;
                border-radius: 0;
            }

            .sidebar {
                width: 100%;
                height: 30vh;
            }

            .main-content {
                height: 70vh;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <div class="sidebar">
            <div class="chat-header">
                <h1><i class="fas fa-clock"></i> Recent Chats</h1>
            </div>
            <div class="note-list" id="noteList">
                <!-- Chat history will be added here -->
            </div>
        </div>

        <div class="main-content">
            <div class="chat-header">
                <h1><i class="fas fa-robot"></i> Libra </h1>
            </div>

            <div class="chat-messages" id="pageContent">
                <div class="message bot-message">
                    <p>ðŸ‘‹ Welcome! I'm Libra your Legal Research Assistant. How can I help you today?</p>
                </div>
            </div>

            <div class="input-area">
                <div class="input-container">
                    <input type="text" id="searchInput" placeholder="Type your question here...">
                    <button onclick="generateContent()">
                        <i class="fas fa-paper-plane"></i>
                        Send
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="loading-spinner" id="loadingSpinner">
        <div class="spinner"></div>
    </div>

    <script>
        let notes = [];

        async function generateContent() {
            const searchInput = document.getElementById('searchInput');
            const prompt = searchInput.value.trim();
            
            if (!prompt) return;

            // Add user message
            const chatMessages = document.querySelector('.chat-messages');
            chatMessages.innerHTML += `
                <div class="message user-message">
                    <p>${prompt}</p>
                </div>
            `;

            // Show loading spinner
            document.getElementById('loadingSpinner').style.display = 'flex';
            
            try {
                const response = await fetch('/generate', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ prompt })
                });
                
                const data = await response.json();
                
                if (data.status === 'success') {
                    // Add bot message
                    chatMessages.innerHTML += `
                        <div class="message bot-message">
                            <div class="note-content">${data.content}</div>
                        </div>
                    `;

                    // Add to notes array
                    notes.unshift({
                        id: Date.now(),
                        title: prompt,
                        content: data.content,
                        timestamp: data.timestamp
                    });
                    
                    // Update sidebar
                    updateNoteList();
                    
                    // Clear search input
                    searchInput.value = '';

                    // Scroll to bottom
                    chatMessages.scrollTop = chatMessages.scrollHeight;
                } else {
                    alert('Error generating content. Please try again.');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred. Please try again.');
            } finally {
                // Hide loading spinner
                document.getElementById('loadingSpinner').style.display = 'none';
            }
        }

        function updateNoteList() {
            const noteList = document.getElementById('noteList');
            noteList.innerHTML = notes.map(note => `
                <div class="note-entry" onclick="showNote(${note.id})">
                    <h3>${note.title}</h3>
                    <div class="note-timestamp">${note.timestamp}</div>
                </div>
            `).join('');
        }

        function showNote(id) {
            const note = notes.find(n => n.id === id);
            if (note) {
                const chatMessages = document.querySelector('.chat-messages');
                chatMessages.innerHTML = `
                    <div class="message bot-message">
                        <h2>${note.title}</h2>
                        <div class="note-timestamp">${note.timestamp}</div>
                        <div class="note-content">${note.content}</div>
                    </div>
                `;
            }
        }

        // Handle Enter key in search input
        document.getElementById('searchInput').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                generateContent();
            }
        });
    </script>
</body>
</html>"""

@app.route('/generate', methods=['POST'])
def generate():
    data = request.json
    prompt = data.get('prompt', '')
    try:
        content = generate_legal_content(prompt)
        # Convert markdown to HTML
        html_content = markdown.markdown(content)
        
        response = {
            'content': html_content,
            'timestamp': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'status': 'success'
        }
    except Exception as e:
        response = {
            'content': str(e),
            'status': 'error'
        }
    
    return jsonify(response)

if __name__ == '__main__':
    app.run(debug=True)
